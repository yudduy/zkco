{"ast":null,"code":"import{useState,useCallback,useEffect}from'react';import{ethers}from'ethers';// ABI for our ZKCoProcessor contract\nconst ZKCoProcessorABI=[\"event ComputationRequested(bytes32 indexed taskId, address requester)\",\"event ProofSubmitted(bytes32 indexed taskId, address operator)\",\"event ComparisonLogged(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved)\",\"event RewardPaid(address indexed operator, uint256 amount, bytes32 indexed taskId)\",\"function requestComputation(bytes calldata inputData) external payable\",\"function submitProof(bytes32 taskId, bytes calldata proof) external\",\"function logComparison(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved) external\",\"function tasks(bytes32) external view returns (bool completed, uint256 startTime, uint256 endTime, uint256 reward, address operator, uint256 complexity)\",\"function totalTasksProcessed() external view returns (uint256)\"];export const useZKVerifier=()=>{const[contract,setContract]=useState(null);const[provider,setProvider]=useState(null);const[signer,setSigner]=useState(null);const[account,setAccount]=useState(null);const[isConnected,setIsConnected]=useState(false);// Store recent comparisons\nconst[recentComparisons,setRecentComparisons]=useState([]);// Placeholder for contract address - should be configured based on deployment\nconst contractAddress=process.env.REACT_APP_CONTRACT_ADDRESS||\"0x1234567890123456789012345678901234567890\";// Replace with actual address after deployment\n// Initialize ethers and connect to the contract\nuseEffect(()=>{const init=async()=>{// Check if window.ethereum is available (MetaMask)\nif(window.ethereum){try{// Request account access\nconst accounts=await window.ethereum.request({method:'eth_requestAccounts'});// Create a Web3Provider\nconst web3Provider=new ethers.providers.Web3Provider(window.ethereum);setProvider(web3Provider);// Get the signer\nconst web3Signer=web3Provider.getSigner();setSigner(web3Signer);// Set account\nsetAccount(accounts[0]);// Create contract instance\nconst zkContract=new ethers.Contract(contractAddress,ZKCoProcessorABI,web3Signer);setContract(zkContract);setIsConnected(true);// Set up event listener for comparison logging\nzkContract.on(\"ComparisonLogged\",(zkGasUsed,normalGasUsed,timeSaved)=>{const newComparison={zkGasUsed:zkGasUsed.toNumber(),normalGasUsed:normalGasUsed.toNumber(),timeSaved:timeSaved.toNumber()};setRecentComparisons(prev=>[newComparison,...prev.slice(0,9)]);});}catch(error){console.error(\"Error initializing Web3:\",error);}}else{console.error(\"Ethereum provider not found. Please install MetaMask.\");}};init();// Cleanup event listeners when component unmounts\nreturn()=>{if(contract){contract.removeAllListeners();}};},[contractAddress]);// Request computation function\nconst requestComputation=useCallback(async inputData=>{if(!contract||!signer){throw new Error(\"Web3 not initialized\");}try{// Convert input data to bytes\nconst inputBytes=ethers.utils.toUtf8Bytes(inputData);// Estimate the cost (task complexity based on data size)\nconst complexity=inputBytes.length;const baseReward=ethers.utils.parseEther(\"0.001\");const estimatedReward=baseReward.mul(ethers.BigNumber.from(1+Math.floor(complexity/100)));// Send transaction with the reward amount\nconst tx=await contract.requestComputation(inputBytes,{value:estimatedReward});await tx.wait();return tx;}catch(error){console.error(\"Error requesting computation:\",error);throw error;}},[contract,signer]);// Fetch comparison data for visualization\nconst fetchComparisonData=useCallback(async()=>{// In a real implementation, you would fetch this from the contract events\n// For demo purposes, we'll generate some sample data\n// In production, you would query the ComparisonLogged events\nif(!contract){throw new Error(\"Web3 not initialized\");}// Simulating event query - in real implementation, you would filter events\nconst mockData={zkGasUsed:Math.floor(Math.random()*50000)+10000,normalGasUsed:Math.floor(Math.random()*100000)+70000,timeSaved:Math.floor(Math.random()*500)+100};return mockData;},[contract]);// Get total tasks processed\nconst getTotalTasksProcessed=useCallback(async()=>{if(!contract){throw new Error(\"Web3 not initialized\");}try{const total=await contract.totalTasksProcessed();return total.toNumber();}catch(error){console.error(\"Error getting total tasks:\",error);return 0;}},[contract]);// Get latest comparisons\nconst getLatestComparisons=useCallback(()=>{// Return the stored recent comparisons\nreturn recentComparisons;},[recentComparisons]);return{requestComputation,fetchComparisonData,getTotalTasksProcessed,getLatestComparisons,isConnected,account};};","map":{"version":3,"names":["useState","useCallback","useEffect","ethers","ZKCoProcessorABI","useZKVerifier","contract","setContract","provider","setProvider","signer","setSigner","account","setAccount","isConnected","setIsConnected","recentComparisons","setRecentComparisons","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","init","window","ethereum","accounts","request","method","web3Provider","providers","Web3Provider","web3Signer","getSigner","zkContract","Contract","on","zkGasUsed","normalGasUsed","timeSaved","newComparison","toNumber","prev","slice","error","console","removeAllListeners","requestComputation","inputData","Error","inputBytes","utils","toUtf8Bytes","complexity","length","baseReward","parseEther","estimatedReward","mul","BigNumber","from","Math","floor","tx","value","wait","fetchComparisonData","mockData","random","getTotalTasksProcessed","total","totalTasksProcessed","getLatestComparisons"],"sources":["/Users/duy/Documents/project/zkco/frontend/src/hooks/useZKVerifier.js"],"sourcesContent":["import { useState, useCallback, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\n// ABI for our ZKCoProcessor contract\nconst ZKCoProcessorABI = [\n  \"event ComputationRequested(bytes32 indexed taskId, address requester)\",\n  \"event ProofSubmitted(bytes32 indexed taskId, address operator)\",\n  \"event ComparisonLogged(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved)\",\n  \"event RewardPaid(address indexed operator, uint256 amount, bytes32 indexed taskId)\",\n  \"function requestComputation(bytes calldata inputData) external payable\",\n  \"function submitProof(bytes32 taskId, bytes calldata proof) external\",\n  \"function logComparison(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved) external\",\n  \"function tasks(bytes32) external view returns (bool completed, uint256 startTime, uint256 endTime, uint256 reward, address operator, uint256 complexity)\",\n  \"function totalTasksProcessed() external view returns (uint256)\"\n];\n\nexport const useZKVerifier = () => {\n  const [contract, setContract] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  \n  // Store recent comparisons\n  const [recentComparisons, setRecentComparisons] = useState([]);\n\n  // Placeholder for contract address - should be configured based on deployment\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS || \"0x1234567890123456789012345678901234567890\"; // Replace with actual address after deployment\n\n  // Initialize ethers and connect to the contract\n  useEffect(() => {\n    const init = async () => {\n      // Check if window.ethereum is available (MetaMask)\n      if (window.ethereum) {\n        try {\n          // Request account access\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n          \n          // Create a Web3Provider\n          const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n          setProvider(web3Provider);\n          \n          // Get the signer\n          const web3Signer = web3Provider.getSigner();\n          setSigner(web3Signer);\n          \n          // Set account\n          setAccount(accounts[0]);\n          \n          // Create contract instance\n          const zkContract = new ethers.Contract(contractAddress, ZKCoProcessorABI, web3Signer);\n          setContract(zkContract);\n          \n          setIsConnected(true);\n          \n          // Set up event listener for comparison logging\n          zkContract.on(\"ComparisonLogged\", (zkGasUsed, normalGasUsed, timeSaved) => {\n            const newComparison = {\n              zkGasUsed: zkGasUsed.toNumber(),\n              normalGasUsed: normalGasUsed.toNumber(),\n              timeSaved: timeSaved.toNumber()\n            };\n            \n            setRecentComparisons(prev => [newComparison, ...prev.slice(0, 9)]);\n          });\n          \n        } catch (error) {\n          console.error(\"Error initializing Web3:\", error);\n        }\n      } else {\n        console.error(\"Ethereum provider not found. Please install MetaMask.\");\n      }\n    };\n    \n    init();\n    \n    // Cleanup event listeners when component unmounts\n    return () => {\n      if (contract) {\n        contract.removeAllListeners();\n      }\n    };\n  }, [contractAddress]);\n\n  // Request computation function\n  const requestComputation = useCallback(async (inputData) => {\n    if (!contract || !signer) {\n      throw new Error(\"Web3 not initialized\");\n    }\n    \n    try {\n      // Convert input data to bytes\n      const inputBytes = ethers.utils.toUtf8Bytes(inputData);\n      \n      // Estimate the cost (task complexity based on data size)\n      const complexity = inputBytes.length;\n      const baseReward = ethers.utils.parseEther(\"0.001\");\n      const estimatedReward = baseReward.mul(ethers.BigNumber.from(1 + Math.floor(complexity / 100)));\n      \n      // Send transaction with the reward amount\n      const tx = await contract.requestComputation(inputBytes, { value: estimatedReward });\n      await tx.wait();\n      \n      return tx;\n    } catch (error) {\n      console.error(\"Error requesting computation:\", error);\n      throw error;\n    }\n  }, [contract, signer]);\n\n  // Fetch comparison data for visualization\n  const fetchComparisonData = useCallback(async () => {\n    // In a real implementation, you would fetch this from the contract events\n    // For demo purposes, we'll generate some sample data\n    // In production, you would query the ComparisonLogged events\n    \n    if (!contract) {\n      throw new Error(\"Web3 not initialized\");\n    }\n    \n    // Simulating event query - in real implementation, you would filter events\n    const mockData = {\n      zkGasUsed: Math.floor(Math.random() * 50000) + 10000,\n      normalGasUsed: Math.floor(Math.random() * 100000) + 70000,\n      timeSaved: Math.floor(Math.random() * 500) + 100\n    };\n    \n    return mockData;\n  }, [contract]);\n\n  // Get total tasks processed\n  const getTotalTasksProcessed = useCallback(async () => {\n    if (!contract) {\n      throw new Error(\"Web3 not initialized\");\n    }\n    \n    try {\n      const total = await contract.totalTasksProcessed();\n      return total.toNumber();\n    } catch (error) {\n      console.error(\"Error getting total tasks:\", error);\n      return 0;\n    }\n  }, [contract]);\n\n  // Get latest comparisons\n  const getLatestComparisons = useCallback(() => {\n    // Return the stored recent comparisons\n    return recentComparisons;\n  }, [recentComparisons]);\n\n  return {\n    requestComputation,\n    fetchComparisonData,\n    getTotalTasksProcessed,\n    getLatestComparisons,\n    isConnected,\n    account\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}