{"ast":null,"code":"/**\n * Custom hook for interacting with the ZK Co-Processor smart contract\n * This hook handles all blockchain interactions and provides a clean interface\n * for the React components to use\n */import{useState,useCallback,useEffect}from'react';import{ethers}from'ethers';// Network configuration\nconst NETWORK_CONFIG={chainId:'0xaa36a7',// Sepolia testnet chain ID in hex\nchainName:'Sepolia Test Network',nativeCurrency:{name:'Sepolia Ether',symbol:'SEP',decimals:18},rpcUrls:['https://sepolia.infura.io/v3/'],blockExplorerUrls:['https://sepolia.etherscan.io']};// ABI for our ZKCoProcessor contract\nconst ZKCoProcessorABI=[\"event ComputationRequested(bytes32 indexed taskId, address requester)\",\"event ProofSubmitted(bytes32 indexed taskId, address operator)\",\"event ComparisonLogged(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved)\",\"event RewardPaid(address indexed operator, uint256 amount, bytes32 indexed taskId)\",\"function requestComputation(bytes calldata inputData) external payable\",\"function submitProof(bytes32 taskId, bytes calldata proof) external\",\"function logComparison(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved) external\",\"function tasks(bytes32) external view returns (bool completed, uint256 startTime, uint256 endTime, uint256 reward, address operator, uint256 complexity)\",\"function totalTasksProcessed() external view returns (uint256)\"];export const useZKVerifier=()=>{const[contract,setContract]=useState(null);// eslint-disable-next-line no-unused-vars\nconst[provider,setProvider]=useState(null);const[signer,setSigner]=useState(null);const[account,setAccount]=useState(null);const[isConnected,setIsConnected]=useState(false);const[isCorrectNetwork,setIsCorrectNetwork]=useState(false);const[networkName,setNetworkName]=useState('');const[isLoading,setIsLoading]=useState(false);// Store recent comparisons\nconst[recentComparisons,setRecentComparisons]=useState([]);// Get contract address from environment variables\nconst contractAddress=process.env.REACT_APP_CONTRACT_ADDRESS||\"0x1234567890123456789012345678901234567890\";/**\n   * Simulate a comparison for demonstration purposes\n   * In a real implementation, comparisons would come from actual processing\n   * @param {number} complexity - The complexity of the task\n   */const simulateComparison=useCallback(complexity=>{if(!contract)return;try{// Calculate simulated gas usage based on input complexity\nconst zkGasUsed=Math.floor(10000+complexity*50);const normalGasUsed=Math.floor(zkGasUsed*(2+Math.random()*3));// 2-5x more gas for normal processing\nconst timeSaved=Math.floor(complexity*(1+Math.random()*2));// Log the comparison to the contract (this will trigger the event listener)\ncontract.logComparison(zkGasUsed,normalGasUsed,timeSaved);}catch(error){console.error(\"Error simulating comparison:\",error);}},[contract]);/**\n   * Function to check if the user is on the correct network (Sepolia)\n   * @returns {Promise<boolean>} True if correct network, false otherwise\n   */const checkNetwork=useCallback(async()=>{if(!window.ethereum)return false;try{const chainId=await window.ethereum.request({method:'eth_chainId'});const isCorrect=chainId===NETWORK_CONFIG.chainId;setIsCorrectNetwork(isCorrect);if(isCorrect){setNetworkName('Sepolia');}else{// Get the network name\nif(chainId==='0x1'){setNetworkName('Ethereum Mainnet');}else if(chainId==='0x5'){setNetworkName('Goerli');}else if(chainId==='0x89'){setNetworkName('Polygon');}else{setNetworkName(`Unknown (${chainId})`);}}return isCorrect;}catch(error){console.error(\"Error checking network:\",error);return false;}},[]);/**\n   * Switch to Sepolia network\n   */const switchToSepolia=useCallback(async()=>{if(!window.ethereum)return false;try{// Try to switch to Sepolia\nawait window.ethereum.request({method:'wallet_switchEthereumChain',params:[{chainId:NETWORK_CONFIG.chainId}]});return true;}catch(switchError){// This error code indicates that the chain has not been added to MetaMask\nif(switchError.code===4902){try{await window.ethereum.request({method:'wallet_addEthereumChain',params:[NETWORK_CONFIG]});return true;}catch(addError){console.error(\"Error adding Sepolia network:\",addError);return false;}}console.error(\"Error switching to Sepolia:\",switchError);return false;}},[]);// Initialize ethers and connect to the contract\nuseEffect(()=>{const init=async()=>{// Check if window.ethereum is available (MetaMask)\nif(window.ethereum){try{// First check if we're on the right network\nconst isCorrect=await checkNetwork();if(!isCorrect){console.warn(\"Not on Sepolia network. Please switch networks.\");return;}// Request account access\nconst accounts=await window.ethereum.request({method:'eth_requestAccounts'});// Create a Web3Provider\nconst web3Provider=new ethers.providers.Web3Provider(window.ethereum);setProvider(web3Provider);// Get the signer\nconst web3Signer=web3Provider.getSigner();setSigner(web3Signer);// Set account\nsetAccount(accounts[0]);// Create contract instance\nconst zkContract=new ethers.Contract(contractAddress,ZKCoProcessorABI,web3Signer);setContract(zkContract);setIsConnected(true);// Set up event listener for comparison logging\nzkContract.on(\"ComparisonLogged\",(zkGasUsed,normalGasUsed,timeSaved)=>{const newComparison={zkGasUsed:zkGasUsed.toNumber(),normalGasUsed:normalGasUsed.toNumber(),timeSaved:timeSaved.toNumber(),isNew:true// Flag to indicate this is a new entry for animation\n};setRecentComparisons(prev=>{// Add the new comparison to the top and keep max 10 entries\nconst newComparisons=[newComparison,...prev.slice(0,9)];// After a delay, remove the isNew flag to stop the animation\nsetTimeout(()=>{setRecentComparisons(current=>current.map((comp,i)=>i===0?{...comp,isNew:false}:comp));},3000);return newComparisons;});});// Listen for network changes\nwindow.ethereum.on('chainChanged',_chainId=>{window.location.reload();});// Listen for account changes\nwindow.ethereum.on('accountsChanged',accounts=>{if(accounts.length>0){setAccount(accounts[0]);}else{setIsConnected(false);setAccount(null);}});}catch(error){console.error(\"Error initializing Web3:\",error);setIsConnected(false);}}else{console.error(\"Ethereum provider not found. Please install MetaMask.\");}};init();// Cleanup event listeners when component unmounts\nreturn()=>{if(contract){contract.removeAllListeners();}if(window.ethereum){window.ethereum.removeAllListeners('chainChanged');window.ethereum.removeAllListeners('accountsChanged');}};},[contractAddress,checkNetwork,contract]);/**\n   * Request computation function - sends a transaction to the smart contract\n   * @param {string} inputData - The data to be processed by the ZK Co-Processor\n   * @returns {Promise<object>} The transaction receipt\n   */const requestComputation=useCallback(async inputData=>{if(!contract||!signer){throw new Error(\"Web3 not initialized\");}// Make sure we're on Sepolia\nif(!isCorrectNetwork){const switched=await switchToSepolia();if(!switched){throw new Error(`Please switch to Sepolia testnet. You are currently on ${networkName}.`);}}setIsLoading(true);try{// Convert input data to bytes\nconst inputBytes=ethers.utils.toUtf8Bytes(inputData);// Estimate the cost (task complexity based on data size)\nconst complexity=inputBytes.length;const baseReward=ethers.utils.parseEther(\"0.001\");// eslint-disable-next-line no-unused-vars\nconst estimatedReward=baseReward.mul(ethers.BigNumber.from(1+Math.floor(complexity/100)));// This is a testnet, so we're not using real ETH\n// We'll just pay a minimal gas fee\nconst minimalPayment=ethers.utils.parseEther(\"0.0001\");// Send transaction with the reward amount (minimal on testnet)\nconst tx=await contract.requestComputation(inputBytes,{value:minimalPayment});const receipt=await tx.wait();// After transaction, simulate a comparison for demonstration purposes\n// In a production app, this would come from actual on-chain events\nsetTimeout(()=>{simulateComparison(complexity);},2000);return receipt;}catch(error){console.error(\"Error requesting computation:\",error);throw error;}finally{setIsLoading(false);}},[contract,signer,isCorrectNetwork,switchToSepolia,networkName,simulateComparison]);/**\n   * Get total tasks processed from the contract\n   * @returns {Promise<number>} Total tasks processed\n   */const getTotalTasksProcessed=useCallback(async()=>{if(!contract){// If contract is not initialized, return mock data for demonstration\nreturn 12;// Default mock value\n}try{const total=await contract.totalTasksProcessed();return total.toNumber();}catch(error){console.error(\"Error getting total tasks:\",error);return 12;// Fallback to mock data on error\n}},[contract]);/**\n   * Get the latest comparison data\n   * @returns {Array} Array of comparison objects with zkGasUsed, normalGasUsed, timeSaved\n   */const getLatestComparisons=useCallback(()=>{// Return the stored recent comparisons\nif(recentComparisons.length===0){// If no comparisons yet, return some mock data for demonstration\nreturn[{zkGasUsed:25000,normalGasUsed:75000,timeSaved:120,isNew:false},{zkGasUsed:15000,normalGasUsed:65000,timeSaved:95,isNew:false},{zkGasUsed:30000,normalGasUsed:85000,timeSaved:150,isNew:false}];}return recentComparisons;},[recentComparisons]);/**\n   * Connect to MetaMask (or other Web3 provider)\n   */const connectWallet=useCallback(async()=>{if(!window.ethereum){alert(\"MetaMask is not installed. Please install MetaMask to use this application.\");return;}try{const accounts=await window.ethereum.request({method:'eth_requestAccounts'});if(accounts.length>0){setAccount(accounts[0]);setIsConnected(true);// Check if on correct network\nconst isCorrect=await checkNetwork();if(!isCorrect){await switchToSepolia();}}}catch(error){console.error(\"Error connecting to wallet:\",error);}},[checkNetwork,switchToSepolia]);return{requestComputation,getTotalTasksProcessed,getLatestComparisons,isConnected,isCorrectNetwork,account,networkName,connectWallet,switchToSepolia,isLoading};};","map":{"version":3,"names":["useState","useCallback","useEffect","ethers","NETWORK_CONFIG","chainId","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","ZKCoProcessorABI","useZKVerifier","contract","setContract","provider","setProvider","signer","setSigner","account","setAccount","isConnected","setIsConnected","isCorrectNetwork","setIsCorrectNetwork","networkName","setNetworkName","isLoading","setIsLoading","recentComparisons","setRecentComparisons","contractAddress","process","env","REACT_APP_CONTRACT_ADDRESS","simulateComparison","complexity","zkGasUsed","Math","floor","normalGasUsed","random","timeSaved","logComparison","error","console","checkNetwork","window","ethereum","request","method","isCorrect","switchToSepolia","params","switchError","code","addError","init","warn","accounts","web3Provider","providers","Web3Provider","web3Signer","getSigner","zkContract","Contract","on","newComparison","toNumber","isNew","prev","newComparisons","slice","setTimeout","current","map","comp","i","_chainId","location","reload","length","removeAllListeners","requestComputation","inputData","Error","switched","inputBytes","utils","toUtf8Bytes","baseReward","parseEther","estimatedReward","mul","BigNumber","from","minimalPayment","tx","value","receipt","wait","getTotalTasksProcessed","total","totalTasksProcessed","getLatestComparisons","connectWallet","alert"],"sources":["/Users/duy/Documents/project/zkco/frontend/src/hooks/useZKVerifier.js"],"sourcesContent":["/**\n * Custom hook for interacting with the ZK Co-Processor smart contract\n * This hook handles all blockchain interactions and provides a clean interface\n * for the React components to use\n */\nimport { useState, useCallback, useEffect } from 'react';\nimport { ethers } from 'ethers';\n\n// Network configuration\nconst NETWORK_CONFIG = {\n  chainId: '0xaa36a7', // Sepolia testnet chain ID in hex\n  chainName: 'Sepolia Test Network',\n  nativeCurrency: {\n    name: 'Sepolia Ether',\n    symbol: 'SEP',\n    decimals: 18\n  },\n  rpcUrls: ['https://sepolia.infura.io/v3/'],\n  blockExplorerUrls: ['https://sepolia.etherscan.io']\n};\n\n// ABI for our ZKCoProcessor contract\nconst ZKCoProcessorABI = [\n  \"event ComputationRequested(bytes32 indexed taskId, address requester)\",\n  \"event ProofSubmitted(bytes32 indexed taskId, address operator)\",\n  \"event ComparisonLogged(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved)\",\n  \"event RewardPaid(address indexed operator, uint256 amount, bytes32 indexed taskId)\",\n  \"function requestComputation(bytes calldata inputData) external payable\",\n  \"function submitProof(bytes32 taskId, bytes calldata proof) external\",\n  \"function logComparison(uint256 zkGasUsed, uint256 normalGasUsed, uint256 timeSaved) external\",\n  \"function tasks(bytes32) external view returns (bool completed, uint256 startTime, uint256 endTime, uint256 reward, address operator, uint256 complexity)\",\n  \"function totalTasksProcessed() external view returns (uint256)\"\n];\n\nexport const useZKVerifier = () => {\n  const [contract, setContract] = useState(null);\n  // eslint-disable-next-line no-unused-vars\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [isCorrectNetwork, setIsCorrectNetwork] = useState(false);\n  const [networkName, setNetworkName] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  \n  // Store recent comparisons\n  const [recentComparisons, setRecentComparisons] = useState([]);\n\n  // Get contract address from environment variables\n  const contractAddress = process.env.REACT_APP_CONTRACT_ADDRESS || \"0x1234567890123456789012345678901234567890\";\n\n  /**\n   * Simulate a comparison for demonstration purposes\n   * In a real implementation, comparisons would come from actual processing\n   * @param {number} complexity - The complexity of the task\n   */\n  const simulateComparison = useCallback((complexity) => {\n    if (!contract) return;\n    \n    try {\n      // Calculate simulated gas usage based on input complexity\n      const zkGasUsed = Math.floor(10000 + (complexity * 50));\n      const normalGasUsed = Math.floor(zkGasUsed * (2 + Math.random() * 3)); // 2-5x more gas for normal processing\n      const timeSaved = Math.floor(complexity * (1 + Math.random() * 2));\n      \n      // Log the comparison to the contract (this will trigger the event listener)\n      contract.logComparison(zkGasUsed, normalGasUsed, timeSaved);\n    } catch (error) {\n      console.error(\"Error simulating comparison:\", error);\n    }\n  }, [contract]);\n\n  /**\n   * Function to check if the user is on the correct network (Sepolia)\n   * @returns {Promise<boolean>} True if correct network, false otherwise\n   */\n  const checkNetwork = useCallback(async () => {\n    if (!window.ethereum) return false;\n    \n    try {\n      const chainId = await window.ethereum.request({ method: 'eth_chainId' });\n      const isCorrect = chainId === NETWORK_CONFIG.chainId;\n      setIsCorrectNetwork(isCorrect);\n      \n      if (isCorrect) {\n        setNetworkName('Sepolia');\n      } else {\n        // Get the network name\n        if (chainId === '0x1') {\n          setNetworkName('Ethereum Mainnet');\n        } else if (chainId === '0x5') {\n          setNetworkName('Goerli');\n        } else if (chainId === '0x89') {\n          setNetworkName('Polygon');\n        } else {\n          setNetworkName(`Unknown (${chainId})`);\n        }\n      }\n      \n      return isCorrect;\n    } catch (error) {\n      console.error(\"Error checking network:\", error);\n      return false;\n    }\n  }, []);\n\n  /**\n   * Switch to Sepolia network\n   */\n  const switchToSepolia = useCallback(async () => {\n    if (!window.ethereum) return false;\n    \n    try {\n      // Try to switch to Sepolia\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{ chainId: NETWORK_CONFIG.chainId }]\n      });\n      \n      return true;\n    } catch (switchError) {\n      // This error code indicates that the chain has not been added to MetaMask\n      if (switchError.code === 4902) {\n        try {\n          await window.ethereum.request({\n            method: 'wallet_addEthereumChain',\n            params: [NETWORK_CONFIG]\n          });\n          return true;\n        } catch (addError) {\n          console.error(\"Error adding Sepolia network:\", addError);\n          return false;\n        }\n      }\n      console.error(\"Error switching to Sepolia:\", switchError);\n      return false;\n    }\n  }, []);\n\n  // Initialize ethers and connect to the contract\n  useEffect(() => {\n    const init = async () => {\n      // Check if window.ethereum is available (MetaMask)\n      if (window.ethereum) {\n        try {\n          // First check if we're on the right network\n          const isCorrect = await checkNetwork();\n          if (!isCorrect) {\n            console.warn(\"Not on Sepolia network. Please switch networks.\");\n            return;\n          }\n          \n          // Request account access\n          const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n          \n          // Create a Web3Provider\n          const web3Provider = new ethers.providers.Web3Provider(window.ethereum);\n          setProvider(web3Provider);\n          \n          // Get the signer\n          const web3Signer = web3Provider.getSigner();\n          setSigner(web3Signer);\n          \n          // Set account\n          setAccount(accounts[0]);\n          \n          // Create contract instance\n          const zkContract = new ethers.Contract(contractAddress, ZKCoProcessorABI, web3Signer);\n          setContract(zkContract);\n          \n          setIsConnected(true);\n          \n          // Set up event listener for comparison logging\n          zkContract.on(\"ComparisonLogged\", (zkGasUsed, normalGasUsed, timeSaved) => {\n            const newComparison = {\n              zkGasUsed: zkGasUsed.toNumber(),\n              normalGasUsed: normalGasUsed.toNumber(),\n              timeSaved: timeSaved.toNumber(),\n              isNew: true // Flag to indicate this is a new entry for animation\n            };\n            \n            setRecentComparisons(prev => {\n              // Add the new comparison to the top and keep max 10 entries\n              const newComparisons = [newComparison, ...prev.slice(0, 9)];\n              \n              // After a delay, remove the isNew flag to stop the animation\n              setTimeout(() => {\n                setRecentComparisons(current => \n                  current.map((comp, i) => i === 0 ? { ...comp, isNew: false } : comp)\n                );\n              }, 3000);\n              \n              return newComparisons;\n            });\n          });\n          \n          // Listen for network changes\n          window.ethereum.on('chainChanged', (_chainId) => {\n            window.location.reload();\n          });\n          \n          // Listen for account changes\n          window.ethereum.on('accountsChanged', (accounts) => {\n            if (accounts.length > 0) {\n              setAccount(accounts[0]);\n            } else {\n              setIsConnected(false);\n              setAccount(null);\n            }\n          });\n          \n        } catch (error) {\n          console.error(\"Error initializing Web3:\", error);\n          setIsConnected(false);\n        }\n      } else {\n        console.error(\"Ethereum provider not found. Please install MetaMask.\");\n      }\n    };\n    \n    init();\n    \n    // Cleanup event listeners when component unmounts\n    return () => {\n      if (contract) {\n        contract.removeAllListeners();\n      }\n      \n      if (window.ethereum) {\n        window.ethereum.removeAllListeners('chainChanged');\n        window.ethereum.removeAllListeners('accountsChanged');\n      }\n    };\n  }, [contractAddress, checkNetwork, contract]);\n\n  /**\n   * Request computation function - sends a transaction to the smart contract\n   * @param {string} inputData - The data to be processed by the ZK Co-Processor\n   * @returns {Promise<object>} The transaction receipt\n   */\n  const requestComputation = useCallback(async (inputData) => {\n    if (!contract || !signer) {\n      throw new Error(\"Web3 not initialized\");\n    }\n    \n    // Make sure we're on Sepolia\n    if (!isCorrectNetwork) {\n      const switched = await switchToSepolia();\n      if (!switched) {\n        throw new Error(`Please switch to Sepolia testnet. You are currently on ${networkName}.`);\n      }\n    }\n    \n    setIsLoading(true);\n    \n    try {\n      // Convert input data to bytes\n      const inputBytes = ethers.utils.toUtf8Bytes(inputData);\n      \n      // Estimate the cost (task complexity based on data size)\n      const complexity = inputBytes.length;\n      const baseReward = ethers.utils.parseEther(\"0.001\");\n      // eslint-disable-next-line no-unused-vars\n      const estimatedReward = baseReward.mul(ethers.BigNumber.from(1 + Math.floor(complexity / 100)));\n      \n      // This is a testnet, so we're not using real ETH\n      // We'll just pay a minimal gas fee\n      const minimalPayment = ethers.utils.parseEther(\"0.0001\");\n      \n      // Send transaction with the reward amount (minimal on testnet)\n      const tx = await contract.requestComputation(inputBytes, { value: minimalPayment });\n      const receipt = await tx.wait();\n      \n      // After transaction, simulate a comparison for demonstration purposes\n      // In a production app, this would come from actual on-chain events\n      setTimeout(() => {\n        simulateComparison(complexity);\n      }, 2000);\n      \n      return receipt;\n    } catch (error) {\n      console.error(\"Error requesting computation:\", error);\n      throw error;\n    } finally {\n      setIsLoading(false);\n    }\n  }, [contract, signer, isCorrectNetwork, switchToSepolia, networkName, simulateComparison]);\n\n  /**\n   * Get total tasks processed from the contract\n   * @returns {Promise<number>} Total tasks processed\n   */\n  const getTotalTasksProcessed = useCallback(async () => {\n    if (!contract) {\n      // If contract is not initialized, return mock data for demonstration\n      return 12; // Default mock value\n    }\n    \n    try {\n      const total = await contract.totalTasksProcessed();\n      return total.toNumber();\n    } catch (error) {\n      console.error(\"Error getting total tasks:\", error);\n      return 12; // Fallback to mock data on error\n    }\n  }, [contract]);\n\n  /**\n   * Get the latest comparison data\n   * @returns {Array} Array of comparison objects with zkGasUsed, normalGasUsed, timeSaved\n   */\n  const getLatestComparisons = useCallback(() => {\n    // Return the stored recent comparisons\n    if (recentComparisons.length === 0) {\n      // If no comparisons yet, return some mock data for demonstration\n      return [\n        { zkGasUsed: 25000, normalGasUsed: 75000, timeSaved: 120, isNew: false },\n        { zkGasUsed: 15000, normalGasUsed: 65000, timeSaved: 95, isNew: false },\n        { zkGasUsed: 30000, normalGasUsed: 85000, timeSaved: 150, isNew: false }\n      ];\n    }\n    return recentComparisons;\n  }, [recentComparisons]);\n\n  /**\n   * Connect to MetaMask (or other Web3 provider)\n   */\n  const connectWallet = useCallback(async () => {\n    if (!window.ethereum) {\n      alert(\"MetaMask is not installed. Please install MetaMask to use this application.\");\n      return;\n    }\n    \n    try {\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n        setIsConnected(true);\n        \n        // Check if on correct network\n        const isCorrect = await checkNetwork();\n        if (!isCorrect) {\n          await switchToSepolia();\n        }\n      }\n    } catch (error) {\n      console.error(\"Error connecting to wallet:\", error);\n    }\n  }, [checkNetwork, switchToSepolia]);\n\n  return {\n    requestComputation,\n    getTotalTasksProcessed,\n    getLatestComparisons,\n    isConnected,\n    isCorrectNetwork,\n    account,\n    networkName,\n    connectWallet,\n    switchToSepolia,\n    isLoading\n  };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}