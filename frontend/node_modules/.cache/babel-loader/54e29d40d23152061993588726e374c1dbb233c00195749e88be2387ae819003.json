{"ast":null,"code":"\"use strict\";\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n// Special API key provided by Quicknode for ethers.js\nconst defaultApiKey = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\nexport class QuickNodeProvider extends UrlJsonRpcProvider {\n  static getApiKey(apiKey) {\n    if (apiKey && typeof apiKey !== \"string\") {\n      logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n    }\n    return apiKey || defaultApiKey;\n  }\n  static getUrl(network, apiKey) {\n    let host = null;\n    switch (network.name) {\n      case \"homestead\":\n        host = \"ethers.quiknode.pro\";\n        break;\n      case \"goerli\":\n        host = \"ethers.ethereum-goerli.quiknode.pro\";\n        break;\n      case \"sepolia\":\n        host = \"ethers.ethereum-sepolia.quiknode.pro\";\n        break;\n      case \"holesky\":\n        host = \"ethers.ethereum-holesky.quiknode.pro\";\n        break;\n      case \"arbitrum\":\n        host = \"ethers.arbitrum-mainnet.quiknode.pro\";\n        break;\n      case \"arbitrum-goerli\":\n        host = \"ethers.arbitrum-goerli.quiknode.pro\";\n        break;\n      case \"arbitrum-sepolia\":\n        host = \"ethers.arbitrum-sepolia.quiknode.pro\";\n        break;\n      case \"base\":\n        host = \"ethers.base-mainnet.quiknode.pro\";\n        break;\n      case \"base-goerli\":\n        host = \"ethers.base-goerli.quiknode.pro\";\n        break;\n      case \"base-spolia\":\n        host = \"ethers.base-sepolia.quiknode.pro\";\n        break;\n      case \"bnb\":\n        host = \"ethers.bsc.quiknode.pro\";\n        break;\n      case \"bnbt\":\n        host = \"ethers.bsc-testnet.quiknode.pro\";\n        break;\n      case \"matic\":\n        host = \"ethers.matic.quiknode.pro\";\n        break;\n      case \"maticmum\":\n        host = \"ethers.matic-testnet.quiknode.pro\";\n        break;\n      case \"optimism\":\n        host = \"ethers.optimism.quiknode.pro\";\n        break;\n      case \"optimism-goerli\":\n        host = \"ethers.optimism-goerli.quiknode.pro\";\n        break;\n      case \"optimism-sepolia\":\n        host = \"ethers.optimism-sepolia.quiknode.pro\";\n        break;\n      case \"xdai\":\n        host = \"ethers.xdai.quiknode.pro\";\n        break;\n      default:\n        logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n    }\n    return \"https:/\" + \"/\" + host + \"/\" + apiKey;\n  }\n}","map":{"version":3,"names":["UrlJsonRpcProvider","Logger","version","logger","defaultApiKey","QuickNodeProvider","getApiKey","apiKey","throwArgumentError","getUrl","network","host","name","arguments"],"sources":["/Users/duy/Documents/project/zkco/frontend/node_modules/@ethersproject/providers/src.ts/quicknode-provider.ts"],"sourcesContent":["\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Quicknode for ethers.js\nconst defaultApiKey = \"919b412a057b5e9c9b6dce193c5a60242d6efadb\";\n\nexport class QuickNodeProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"ethers.quiknode.pro\";\n                break;\n            case \"goerli\":\n                host = \"ethers.ethereum-goerli.quiknode.pro\";\n                break;\n            case \"sepolia\":\n                host = \"ethers.ethereum-sepolia.quiknode.pro\";\n                break;\n            case \"holesky\":\n                host = \"ethers.ethereum-holesky.quiknode.pro\";\n                break;\n            case \"arbitrum\":\n                host = \"ethers.arbitrum-mainnet.quiknode.pro\";\n                break;\n            case \"arbitrum-goerli\":\n                host = \"ethers.arbitrum-goerli.quiknode.pro\";\n                break;\n            case \"arbitrum-sepolia\":\n                host = \"ethers.arbitrum-sepolia.quiknode.pro\";\n                break;\n            case \"base\":\n                host = \"ethers.base-mainnet.quiknode.pro\";\n                break;\n            case \"base-goerli\":\n                host = \"ethers.base-goerli.quiknode.pro\";\n                break;\n            case \"base-spolia\":\n                host = \"ethers.base-sepolia.quiknode.pro\";\n                break;\n            case \"bnb\":\n                host = \"ethers.bsc.quiknode.pro\";\n                break;\n            case \"bnbt\":\n                host = \"ethers.bsc-testnet.quiknode.pro\";\n                break;\n            case \"matic\":\n                host = \"ethers.matic.quiknode.pro\";\n                break;\n            case \"maticmum\":\n                host = \"ethers.matic-testnet.quiknode.pro\";\n                break;\n            case \"optimism\":\n                host = \"ethers.optimism.quiknode.pro\";\n                break;\n            case \"optimism-goerli\":\n                host = \"ethers.optimism-goerli.quiknode.pro\";\n                break;\n            case \"optimism-sepolia\":\n                host = \"ethers.optimism-sepolia.quiknode.pro\";\n                break;\n            case \"xdai\":\n                host = \"ethers.xdai.quiknode.pro\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (\"https:/\" + \"/\" + host + \"/\" + apiKey);\n    }\n}\n"],"mappings":"AAAA,YAAY;;AAGZ,SAASA,kBAAkB,QAAQ,yBAAyB;AAE5D,SAASC,MAAM,QAAQ,uBAAuB;AAC9C,SAASC,OAAO,QAAQ,YAAY;AACpC,MAAMC,MAAM,GAAG,IAAIF,MAAM,CAACC,OAAO,CAAC;AAElC;AACA,MAAME,aAAa,GAAG,0CAA0C;AAEhE,OAAM,MAAOC,iBAAkB,SAAQL,kBAAkB;EAErD,OAAOM,SAASA,CAACC,MAAW;IACxB,IAAIA,MAAM,IAAI,OAAOA,MAAO,KAAK,QAAQ,EAAE;MACvCJ,MAAM,CAACK,kBAAkB,CAAC,gBAAgB,EAAE,QAAQ,EAAED,MAAM,CAAC;;IAEjE,OAAOA,MAAM,IAAIH,aAAa;EAClC;EAEA,OAAOK,MAAMA,CAACC,OAAgB,EAAEH,MAAY;IACxC,IAAII,IAAI,GAAG,IAAI;IACf,QAAQD,OAAO,CAACE,IAAI;MAChB,KAAK,WAAW;QACZD,IAAI,GAAG,qBAAqB;QAC5B;MACJ,KAAK,QAAQ;QACTA,IAAI,GAAG,qCAAqC;QAC5C;MACJ,KAAK,SAAS;QACVA,IAAI,GAAG,sCAAsC;QAC7C;MACJ,KAAK,SAAS;QACVA,IAAI,GAAG,sCAAsC;QAC7C;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,sCAAsC;QAC7C;MACJ,KAAK,iBAAiB;QAClBA,IAAI,GAAG,qCAAqC;QAC5C;MACJ,KAAK,kBAAkB;QACnBA,IAAI,GAAG,sCAAsC;QAC7C;MACJ,KAAK,MAAM;QACPA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,aAAa;QACdA,IAAI,GAAG,iCAAiC;QACxC;MACJ,KAAK,aAAa;QACdA,IAAI,GAAG,kCAAkC;QACzC;MACJ,KAAK,KAAK;QACNA,IAAI,GAAG,yBAAyB;QAChC;MACJ,KAAK,MAAM;QACPA,IAAI,GAAG,iCAAiC;QACxC;MACJ,KAAK,OAAO;QACRA,IAAI,GAAG,2BAA2B;QAClC;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,mCAAmC;QAC1C;MACJ,KAAK,UAAU;QACXA,IAAI,GAAG,8BAA8B;QACrC;MACJ,KAAK,iBAAiB;QAClBA,IAAI,GAAG,qCAAqC;QAC5C;MACJ,KAAK,kBAAkB;QACnBA,IAAI,GAAG,sCAAsC;QAC7C;MACJ,KAAK,MAAM;QACPA,IAAI,GAAG,0BAA0B;QACjC;MACJ;QACGR,MAAM,CAACK,kBAAkB,CAAC,qBAAqB,EAAE,SAAS,EAAEK,SAAS,CAAC,CAAC,CAAC,CAAC;;IAGhF,OAAQ,SAAS,GAAG,GAAG,GAAGF,IAAI,GAAG,GAAG,GAAGJ,MAAM;EACjD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}